# -*- coding: utf-8 -*-
"""HW0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HWaz4DbCXbHa2HaVZAiXRoq-JW4N3Y9Y
"""

import numpy as np

def draw_samples(n):
  x = np.random.uniform(size=(n,)) # generate n uniform samples
  for i in range(0, n):
    # if the generated sample is 0 <= x < 0.35 (0.35 of unit length interval) then return 1
    if x[i] < 0.35:
      x[i] = 1
    # if the generated sample is 0.35 <= x < 0.8 (0.45 of unit length interval) then return 0
    elif x[i] < 0.35 + 0.45:
      x[i] = 0
    # if the generated sample is 0.8 <= x =< 1 (0.2 of unit length interval) then return -1
    else:
      x[i] = -1
  return x

def sum_squares(x):
  # returns sum of an array with squared elements using dot product of two vectors
  return np.dot(x, x)

def troublemakers(n):
  # at first every one has a cup filled up to 100% with a pure liquid
  cupA = np.double(1.0) # apple juice
  cupB = np.double(1.0) # oreo milkshake
  for i in range(0, n):
    cupB = cupB + 0.35 * cupA # she pours 35% of her liquid into his cup
    cupA = 0.65 * cupA        # now she has 65% of the prior liquid left in her cup
    cupA = cupA + 0.2 * cupB  # he pours 20% of his liquid into hes cup
    cupB = 0.8 * cupB         # now he has 80% of the prior liquid left in his cup
    cupA = np.round(cupA, 8)
    cupB = np.round(cupB, 8)
  return np.array([cupA, cupB])

